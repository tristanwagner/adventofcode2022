// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";

var input = Fs.readFileSync("input.txt", "ascii");

var rounds = Js_string.split("\n", input);

function getRoundResult(player, enemy) {
  switch (player) {
    case /* Paper */0 :
        if (enemy === 0) {
          return /* Draw */2;
        }
        switch (enemy) {
          case /* Rock */1 :
              return /* Won */0;
          case /* Scissors */2 :
              return /* Lost */1;
          case /* None */3 :
              return /* Draw */2;
          
        }
    case /* Rock */1 :
        if (enemy >= 3) {
          return /* Draw */2;
        }
        switch (enemy) {
          case /* Paper */0 :
              return /* Lost */1;
          case /* Rock */1 :
              return /* Draw */2;
          case /* Scissors */2 :
              return /* Won */0;
          
        }
    case /* Scissors */2 :
        if (enemy !== 1) {
          if (enemy !== 0) {
            return /* Draw */2;
          } else {
            return /* Won */0;
          }
        } else {
          return /* Lost */1;
        }
    case /* None */3 :
        return /* Draw */2;
    
  }
}

function getScoreFromShape(shape) {
  switch (shape) {
    case /* Paper */0 :
        return 2;
    case /* Rock */1 :
        return 1;
    case /* Scissors */2 :
        return 3;
    case /* None */3 :
        return 0;
    
  }
}

function getShapeFromLetter(letter) {
  switch (letter) {
    case "A" :
    case "X" :
        return /* Rock */1;
    case "B" :
    case "Y" :
        return /* Paper */0;
    case "C" :
    case "Z" :
        return /* Scissors */2;
    default:
      return /* None */3;
  }
}

function getScoreFromResult(result) {
  if (result >= 3) {
    return 0;
  }
  switch (result) {
    case /* Won */0 :
        return 6;
    case /* Lost */1 :
        return 0;
    case /* Draw */2 :
        return 3;
    
  }
}

var score = rounds.reduce((function (acc, round) {
        if (round.length <= 0) {
          return acc + 0 | 0;
        }
        var letters = Js_string.split(" ", round);
        var enemy = Caml_array.get(letters, 0);
        var player = Caml_array.get(letters, 1);
        var enemyShape = getShapeFromLetter(enemy);
        var playerShape = getShapeFromLetter(player);
        var result = getRoundResult(playerShape, enemyShape);
        var playerScoreFromShape = getScoreFromShape(playerShape);
        var playerScoreFromResult = getScoreFromResult(result);
        var currentScore = playerScoreFromShape + playerScoreFromResult | 0;
        return acc + currentScore | 0;
      }), 0);

console.log("Part 1:", score);

function getResultFromLetter(letter) {
  switch (letter) {
    case "X" :
        return /* Lost */1;
    case "Y" :
        return /* Draw */2;
    case "Z" :
        return /* Won */0;
    default:
      return /* None */3;
  }
}

function getShapeFromResult(enemy, result) {
  switch (enemy) {
    case /* Paper */0 :
        switch (result) {
          case /* Won */0 :
              return /* Scissors */2;
          case /* Lost */1 :
              return /* Rock */1;
          case /* Draw */2 :
              return /* Paper */0;
          case /* None */3 :
              return /* None */3;
          
        }
    case /* Rock */1 :
        switch (result) {
          case /* Won */0 :
              return /* Paper */0;
          case /* Lost */1 :
              return /* Scissors */2;
          case /* Draw */2 :
              return /* Rock */1;
          case /* None */3 :
              return /* None */3;
          
        }
    case /* Scissors */2 :
        switch (result) {
          case /* Won */0 :
              return /* Rock */1;
          case /* Lost */1 :
              return /* Paper */0;
          case /* Draw */2 :
              return /* Scissors */2;
          case /* None */3 :
              return /* None */3;
          
        }
    case /* None */3 :
        return /* None */3;
    
  }
}

var score2 = rounds.reduce((function (acc, round) {
        if (round.length <= 0) {
          return acc + 0 | 0;
        }
        var letters = Js_string.split(" ", round);
        var enemy = Caml_array.get(letters, 0);
        var player = Caml_array.get(letters, 1);
        var enemyShape = getShapeFromLetter(enemy);
        var endRound = getResultFromLetter(player);
        var playerShape = getShapeFromResult(enemyShape, endRound);
        var playerScoreFromShape = getScoreFromShape(playerShape);
        var playerScoreFromResult = getScoreFromResult(endRound);
        var currentScore = playerScoreFromShape + playerScoreFromResult | 0;
        return acc + currentScore | 0;
      }), 0);

console.log("Part 2:", score2);

export {
  input ,
  rounds ,
  getRoundResult ,
  getScoreFromShape ,
  getShapeFromLetter ,
  getScoreFromResult ,
  score ,
  getResultFromLetter ,
  getShapeFromResult ,
  score2 ,
}
/* input Not a pure module */
