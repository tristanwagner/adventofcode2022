// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";

var input = Fs.readFileSync("input.txt", "ascii");

var pairs = input.split("\n").filter(function (s) {
      return s !== "";
    });

var ranges = pairs.map(function (pair) {
      return pair.split(",").map(function (x) {
                  var s = x.split("-");
                  return {
                          low: Caml_format.int_of_string(Caml_array.get(s, 0)),
                          high: Caml_format.int_of_string(Caml_array.get(s, 1))
                        };
                });
    });

function rangeOverlap(r1, r2) {
  if (r1.low <= r2.low && r1.high >= r2.high) {
    return true;
  } else if (r2.low <= r1.low) {
    return r2.high >= r1.high;
  } else {
    return false;
  }
}

var result = ranges.reduce((function (acc, range) {
        if (rangeOverlap(Caml_array.get(range, 0), Caml_array.get(range, 1))) {
          return acc + 1 | 0;
        } else {
          return acc;
        }
      }), 0);

console.log("Part 1:", result);

function rangeOverlapAtAll(r1, r2) {
  if (r1.low <= r2.low && r1.high >= r2.low) {
    return true;
  } else if (r2.low <= r1.low) {
    return r2.high >= r1.low;
  } else {
    return false;
  }
}

var result2 = ranges.reduce((function (acc, range) {
        if (rangeOverlapAtAll(Caml_array.get(range, 0), Caml_array.get(range, 1))) {
          return acc + 1 | 0;
        } else {
          return acc;
        }
      }), 0);

console.log("Part 2:", result2);

export {
  input ,
  pairs ,
  ranges ,
  rangeOverlap ,
  result ,
  rangeOverlapAtAll ,
  result2 ,
}
/* input Not a pure module */
