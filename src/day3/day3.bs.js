// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";

var input = Fs.readFileSync("input.txt", "ascii");

var backpacks = Js_string.split("\n", input);

var contents = backpacks.reduce((function (acc, current) {
        var contentLength = current.length;
        var half = contentLength / 2 | 0;
        var first = current.slice(0, half);
        var second = current.slice(half);
        acc.push({
              first: first,
              second: second
            });
        return acc;
      }), []);

var duplicates = contents.reduce((function (acc, current) {
        var dups = [];
        for(var x = 0 ,x_finish = current.first.length; x <= x_finish; ++x){
          var first = current.first.charAt(x);
          if (first !== "" && Js_string.includes(first, current.second) && dups.indexOf(first) < 0) {
            dups.push(first);
          }
          
        }
        return acc.concat(dups);
      }), []);

function getItemPriority(item) {
  var base = item.charCodeAt(0) | 0;
  if (base <= 90) {
    return ((base - ("A".charCodeAt(0) | 0) | 0) + 1 | 0) + 26 | 0;
  } else {
    return (base - ("a".charCodeAt(0) | 0) | 0) + 1 | 0;
  }
}

var result = duplicates.reduce((function (acc, current) {
        return acc + getItemPriority(current) | 0;
      }), 0);

console.log("Part 1:", result);

var groupedBackpacks = [];

for(var x = 0 ,x_finish = backpacks.length; x < x_finish; ++x){
  var currentLine = Caml_array.get(backpacks, x);
  var group = [currentLine];
  if (x % 3 === 0) {
    for(var y = 1; y <= 2; ++y){
      if ((x + y | 0) < backpacks.length) {
        var targetLine = Caml_array.get(backpacks, x + y | 0);
        group.push(targetLine);
      }
      
    }
    groupedBackpacks.push(group);
  }
  
}

var badges = groupedBackpacks.reduce((function (acc, group) {
        var $$break = false;
        var current = Caml_array.get(group, 0);
        for(var x = 0 ,x_finish = current.length; x <= x_finish; ++x){
          var currentChar = Js_string.charAt(x, current);
          if (!$$break && currentChar !== "" && group.every((function(currentChar){
                return function (pack) {
                  return Js_string.includes(currentChar, pack);
                }
                }(currentChar)))) {
            acc.push(currentChar);
            $$break = true;
          }
          
        }
        return acc;
      }), []);

var result2 = badges.reduce((function (acc, current) {
        return acc + getItemPriority(current) | 0;
      }), 0);

console.log("Part 2:", result2);

export {
  input ,
  backpacks ,
  contents ,
  duplicates ,
  getItemPriority ,
  result ,
  groupedBackpacks ,
  badges ,
  result2 ,
}
/* input Not a pure module */
